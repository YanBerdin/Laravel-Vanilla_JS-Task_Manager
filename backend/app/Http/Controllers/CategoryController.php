<?php

//! S07E06 CrÃ©ation Table et Controler et Model Category

namespace App\Http\Controllers;

use App\Models\Category;
use Illuminate\Http\Request; //FIXME: Christ-H
use Illuminate\Support\Facades\Validator; //FIXME: Christ-H

class CategoryController extends Controller
{
    // CrÃ©ation de la mÃ©thode list
    public function list()
    {
        // Utilisation de la mÃ©thode all() grÃ¢ce Ã  l'hÃ©ritage
        $categories = Category::all()->load('tasks');
        // Retour automatique au format JSON ðŸ‘Œ
        // return $categories; // renvoie toutes les tÃ¢ches liÃ©es Ã  chaque catÃ©gory
        if ($categories) {
            return $categories;
        } else {
            return response(null, 404);
        }
    }

    // CrÃ©ation de la mÃ©thode find($id)
    public function find($id)
    {
        // Utilisation de la mÃ©thode find($id) grÃ¢ce Ã  l'hÃ©ritage
        $category = Category::find($id);

        if (!$category) {
            return response(null, 404); // 404 : not found
        }
        // Retour auto au format JSON
        return $category;
    }

    //FIXME:
    // Ne sera exÃ©cutÃ©e que si l'url http://127.0.0.1:8000/categories en mÃ©thode POST est appelÃ©e
    // CrÃ©ation de la mÃ©thode create
    public function create(Request $request) //? $request = contenu de la requÃªte
    {
        //? Dans la variable $validator, je mets le rÃ©sultat d'une vÃ©rification de l'input name
        $validator = Validator::make($request->input(), [
            //? avec l'outil Facade Validator on vÃ©rifie :
            //? - title existe bien : required
            //? - title n'est pas vide : filled
            'name' => ['required', 'filled']
        ]);

        // VÃ©rifier si validation KO
        if ($validator->fails()) {
            // si oui, renvoyer un code HTTP 422,
            // avec un message d'erreur Ã  l'API plus explicite que erreur500
            // Permet de faire savoir que câ€™est une erreur de requÃªte
            // (pas le serveur plantÃ© (erreur 500)
            return response()->json($validator->errors(), 422);
        }
        //? Extraction des valeurs passÃ©es de la body de la requÃªte
        // RÃ©cupÃ©rer la donnÃ©e name dans le json de la requete
        $name = $request->input('name');

        //? CrÃ©er une nouvelle instance de la classe Task,
        // puis dÃ©finir sa propriÃ©tÃ© name
        $category = new Category();
        // InsÃ©rer variable $title dans la propriÃ©tÃ© name de lâ€™instance
        // de Category du Model Category
        // on lui attribue la valeur rÃ©cupÃ©rÃ©e dans la requÃªte
        $category->name = $name;

        // On sauvegarde, puis on gÃ¨re la rÃ©ponse avec le code HTTP qui convient
        // 201 : Created
        // 500 : Internal Server Error
        $category->saveOrFail();
        return $category;
    }

    // MÃ©thode pour modifier les propriÃ©tÃ©s selon son id
    // Ne sera exÃ©cutÃ©e que si l'url http://127.0.0.1:8000/api/categories/$id en mÃ©thode PUT est appelÃ©e
    public function update(Request $request, $id) //?contenu requete + identifiant
    {
        // RÃ©cupÃ©rer la categorie Ã  modifier avec l'id
        $category = Category::findOrFail($id);

        //? VÃ©rifier si la donnÃ©e name est bien dans le corps de la requÃªte S07E06
        //!? Dans la variable $validator, je mets le rÃ©sultat d'une vÃ©rification de l'input name
        // Avec la FaÃ§ade (outil de Laravel) Validator, je vÃ©rifie que :
        // - name existe bien : required
        // - name n'est pas vide : filled
        $validator = Validator::make($request->input(), [
            'name' => ['required', 'filled']
        ]);

        // On vÃ©rifie si la validation a ratÃ©
        if ($validator->fails()) {
            // si oui, renvoyer un code HTTP 422, avec un message d'erreur
            return response()->json($validator->errors(), 422);
        }

        //? Extraction des valeurs passÃ©es dans le body de la requÃªte
        $name = $request->input('name');

        //? Ecraser l'ancienne valeur stockÃ©e dans la propriÃ©tÃ© name
        // (avec la nouvelle valeur)
        // dans lâ€™instance de Category du Model Category
        $category->name = $name;

        // On sauvegarde, puis on gÃ¨re la rÃ©ponse avec le code HTTP qui convient
        $category->updateOrFail();
        return $category;
    }

    //Ne sera exÃ©cutÃ©e que si l'url http://127.0.0.1:8000/api/categories/$id en mÃ©thode DELETE est appelÃ©e
    // CrÃ©ation mÃ©thode delete
    public function delete($id)
    {
        // RÃ©cupÃ©rer tÃ¢che (objet) avec l'id
        $category = Category::findOrFail($id);

        // suppression dans la BDD
        // rÃ©ponse HTTP : 200 -> Delete
        // rÃ©ponse HTTP : 500 -> Internal Server Error
        $category->deleteOrFail();
        return $category;
    }
}
