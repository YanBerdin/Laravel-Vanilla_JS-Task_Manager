<?php

//? attention le fichier doit avoir le mÃªme nom que la classe qu'il dÃ©finit

namespace App\Http\Controllers;

//!Penser Ã  'USE' le Model UtilisÃ©
use App\Models\Task;

//!Penser Ã  'USE' le Request
use Illuminate\Http\Request;

//! ImplÃ©mentation de VALIDATOR => Dans create() et update() => S07E06
use Illuminate\Support\Facades\Validator;

// 'extends' du 'Controller' implÃ©mentÃ© par 'Eloquent' hÃ©ritant de ses mÃ©thodes
class TaskController extends Controller
{
    // CrÃ©ation de la mÃ©thode list
    public function list()
    {
        //  Utilisation de la mÃ©thode all() grÃ¢ce Ã  l'hÃ©ritage
        // $tasks = Task::all(); //* V1 sans load

        //? grÃ¢ce Ã  la relation One To Many mise en place dans les modÃ¨les Task et Category,
        //? nous pouvons maintenant faire appel Ã  la mÃ©thode load()
        // https://laravel.com/docs/10.x/eloquent-relationships#lazy-eager-loading
        //? ğŸ’¡Eager Loading ğŸ’¡
        //?Indiquer explicitement que je veux que
        //? toutes les relations de tasks avec categories soient chargÃ©es au dÃ©marrage

        //* $tasks = Task::all()->load('category');
        // TODO => RÃ©cupÃ©rer la liste des tasks avec le nom de leur catÃ©gorie + tags
        $tasks = Task::all()->load('category', 'tags');

        //  Retour automatique au format JSON ğŸ‘Œ
        // return $tasks;
        if ($tasks) {
            return $tasks;
        } else {
            return response(null, 404);
        }
    }

    // CrÃ©ation de la mÃ©thode find
    public function find($id)
    {
        // Utilisation de la mÃ©thode find() grÃ¢ce Ã  l'hÃ©ritage
        //? ğŸ’¡Eager Loading ğŸ’¡
        //?Indiquer explicitement que je veux que
        //? toutes les relations de tasks avec categories soient chargÃ©es au dÃ©marrage
        // $task = Task::findOrFail($id)->load('category');
        // TODO => RÃ©cupÃ©rer la liste des tasks avec le nom de leur catÃ©gorie + tags
        $task = Task::all()->load('category', 'tags');

        // Retour automatique au format JSON ğŸ‘Œ
        return $task;
        // return $task->category->name; renvoie le nom de la catÃ©gorie liÃ©e Ã  cette tÃ¢che
    }

    // Ne sera exÃ©cutÃ©e que si l'url http://127.0.0.1:8000/tasks en mÃ©thode POST est appelÃ©e
    public function create(Request $request) //? $request = contenu de la requÃªte
    {
        //? Dans la variable $validator, je mets le rÃ©sultat d'une vÃ©rification de l'input title

        $validator = Validator::make($request->input(), [
            //? Avec la FaÃ§ade (outil de Laravel) Validator,
            // je vÃ©rifie que :
            //? - title existe bien : required
            //? - title n'est pas vide : filled
            'title' => ['required', 'filled']
        ]);

        // VÃ©rifier si validation KO
        if ($validator->fails()) {
            // si oui, renvoyer un code HTTP 422,
            // avec un message d'erreur Ã  l'API plus explicite que erreur500
            // Permet de faire savoir que câ€™est une erreur de requÃªte
            // (pas le serveur plantÃ© (erreur 500)
            return response()->json($validator->errors(), 422);
        }

        //? Segment VALIDATOR ligne 50 Ã  63 => S07E06
        //? Extraction des valeurs passÃ©es dans la body de la requÃªte
        // RÃ©cupÃ©rer la donnÃ©e title dans le json de la requete
        $title = $request->input('title');
        $category_id = $request->input('category_id'); //FIXME: Christ-H
        $tags = $request->input('tags'); //FIXME: Christ-H

        //? CrÃ©er une nouvelle instance de la classe Task,
        // puis dÃ©finir sa propriÃ©tÃ© title
        $task = new Task();

        // InsÃ©rer variable $title dans la propriÃ©tÃ© title de lâ€™instance
        // de Task du Model Task
        // on lui attribue la valeur rÃ©cupÃ©rÃ©e dans la requÃªte
        $task->title = $title;
        $task->category_id = $category_id; //FIXME: Christ-H
        $task->tags()->sync($tags); //FIXME: Christ-H

        // On sauvegarde dans la BDD, puis on gÃ¨re la rÃ©ponse avec le code HTTP qui convient
        if ($task->save()) {
            return response()->json($task, 201); // 201 : Created
        } else {
            return response(null, 500); // 500 : Internal Server Error
        }

        //FIXME: $task->saveOrFail();
    }

    // MÃ©thode pour modifier les propriÃ©tÃ©s d'une tÃ¢che selon son id
    // Ne sera exÃ©cutÃ©e que si l'url http://127.0.0.1:8000/api/tasks/$id en mÃ©thode PUT est appelÃ©e
    public function update(Request $request, $id) //?contenu requete + identifiant
    {
        // On recupÃ¨re la tÃ¢che Ã  modifier avec l'id
        $task = Task::find($id); //FIXME: $task = Task::findOrFail($id);
        // Si on n'a rien, on ne peut pas faire de mise Ã  jour
        // 404 : not found

        if (!$task) {
            return response(null, 404);
        }

        //? On vÃ©rifie si la donnÃ©e title est bien dans le corps de la requÃªte S07E06
        //! Dans la variable $validator, je mets le rÃ©sultat d'une vÃ©rification de l'input title
        // Avec la FaÃ§ade (outil de Laravel) Validator, je vÃ©rifie que :
        // - title existe bien : required
        // - title n'est pas vide : filled
        $validator = Validator::make($request->input(), [ // RÃ©cupÃ©rer title dans le json de requÃªte
            'title' => ['required', 'filled']
        ]);

        // On vÃ©rifie si la validation a ratÃ©
        if ($validator->fails()) {
            // si oui, on renvoie un code HTTP 422, avec un message d'erreur
            return response()->json($validator->errors(), 422);
        }

        //? Extraction des valeurs passÃ©es dans le body de la requÃªte
        $title = $request->input('title');
        //TODO RÃ©cupÃ©rer aussi catÃ©gorie + tags
        $category_id = $request->input('category_id'); //FIXME: Christ-H
        $tags = $request->input('tags'); //FIXME: Christ-H

        //? Ecraser l'ancienne valeur stockÃ©e dans la propriÃ©tÃ© title
        // (avec la nouvelle valeur)
        // dans lâ€™instance de Task du Model Task
        $task->title = $title;
        //TODO Ecraser aussi catÃ©gorie + tags
        $task->category_id = $category_id; //FIXME: Christ-H
        $task->tags()->sync($tags); //FIXME: Christ-H

        //FIXME: $task->saveOrFail();

        // On sauvegarde, puis on gÃ¨re la rÃ©ponse avec le code HTTP qui convient
        if ($task->save()) {
            return response()->json($task, 201); // Renvoie l'objet modifiÃ© au format JSON (201: Created)
        } else {
            return response(null, 500); // 500 : Internal Server Error
        }
    }

    //Ne sera exÃ©cutÃ©e que si l'url http://127.0.0.1:8000/api/tasks/$id en mÃ©thode DELETE est appelÃ©e
    public function delete($id)
    {
        // On recherche avec l'id
        $task = Task::find($id); //FIXME: $task = Task::findOrFail($id);
        // Si on n'a rien, on ne peut pas faire de suppression
        if (!$task) {
            return response(null, 404); // 404 : not found
        }

        // On supprime puis on gÃ¨re la rÃ©ponse avec le code HTTP qui convient
        if ($task->delete()) {
            return response(null, 200);
        } else {
            return response(null, 500); // 500 : Internal Server Error
        }

        // FIXME: $task->deleteOrFail();
    }
}
//! Dans le cadre dâ€™une API Rest
// on ne peut pas supprimer plusieurs occurrences en mÃªme temps
// La normalisation des routes ne permet de modifier quâ€™1 par 1
//? Avec une architecture non Rest => On peut sans problÃ¨me le faire
