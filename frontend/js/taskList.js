console.log("Yo taskList.js");

// INFO : adresse pour navigateur => http://localhost:8080/

//? Plan d'action :
//? - on attend que le DOM soit compl√®tement charg√©
//? - on envoie une requ√™te √† l'API REST pour r√©cup√©rer la liste des t√¢ches
//? - si la r√©ponse est ok, alors, on convertit le json en tableau d'objets JS
//? - on boucle sur le tableau pour cr√©er des <li>, puis les ins√©rer dans le <ul>

/**
 * Charge la liste de toutes les Tasks depuis l'API Task (API REST)
 * @return {array} taskList
 */
async function getTasks() {
  console.log("Chargement de getTasks() pour r√©cup√©rer la liste des t√¢ches");
  //! Async => Penser √† Await
  // D√©but de l'exercice
  // Notre but : aller chercher la liste des pays sur RestCountries

  //? API REST suis architecture REST
  //? alors que FETCH ne fait que envoyer / recevoir les requetes
  // On pr√©cise l'url du endpoint en argument de fetch.
  // C'est fetch qui se charge de contacter l'API
  // et r√©cup√©rer sa r√©ponse dans la constante response.
  // const response = await fetch('http://mon-api.com/endpoint');
  //? On ne sait pas combien de temps l'API restcountries mettra √† nous r√©pondre :
  //? On await

  //* 1) envoi d'une requ√™te HTTP vers Endpoint (un autre site) !
  // const response = await fetch("http://127.0.0.1:8000/api/tasks");
  const response = await fetch(apiConfiguration.endpoint + "/tasks");
  //! fetch renvoie un objet qui est aussi Promess
  console.log(response);

  // Pour le moment, on obtient un tableau d'objets avec beaucoup d'informations, trop complexe.
  //? La r√©ponse ne contient pas que du json mais aussi des headers entre autres
  //? On veut extraire les donn√©es qui nous sont n√©cessaire : le titre des taches

  // On cr√©e un tableau vide pour stocker les pays √† afficher
  // Ajout√© suite √† ma question pourquoi pas comme countries [] ?
  let tasksList = []; //! (D√©clar√© par erreur au d√©but avec const)
  //* 2) On r√©cup√®re la r√©ponse qui ne contient pas QUE du json
  if (response.status === 200) {
    //* 3) n‚Äôen extraire que le json
    tasksList = await response.json();
  }
  return tasksList;
}

// On veut une fonction qui nous cr√©er le DOM pour afficher UNE t√¢che !
/*
    <ul class="tasklist">
      <li data-id="0">
        <p>sortir les poubelles</p>  // exemple de tache √† r√©cup√©rer
        <div class="delete"></div>
        <div class="edit"></div>
      </li>
      </ul>
*/

//FIXME:
function resetTaskForm() {
  console.log("resetTaskForm() called"); 
  const taskForm = document.querySelector(".modal-dialog form");
  taskForm.reset();
}

/**
 * ins√®re un nouvel √©l√©ment dans le DOM en y ins√©rant les donn√©es stock√©es dans taskData
 * @param {object} taskData
 * Methode qui affiche les donn√©es sur le DOM
 */ //* et ne return rien
function insertTaskInDom(taskData) {
  //TODO console.log(taskData);
  // ligne correspondant √† 1ere ligne exemple
  // <li data-id="0">

  // On cr√©√© notre √©l√©ment qui repr√©sent notre tache, ici un <li>
  const taskElement = document.createElement("li");
  console.log(taskElement);
  // Recuperer et Inserer l'id de la Task dans le <li>
  // On lui d√©fini l'attribut de donn√©e data-id et y stocke l'ID de la task en BDD
  taskElement.dataset.id = taskData.id;

  //* <p>sortir les poubelles</p>
  // Ensuite on passe au contenu du <li>, d'abord le titre en <p>
  const titleElement = document.createElement("p");

  // On d√©finit le contenu textuel de cette nouvelle balise <p> parle titre de la tache
  // Inserer le titre de la Task dans <p>
  titleElement.textContent = taskData.title;

  // Il ne faut pas oublier d'indiquer que cette balise doit etre DANS la <li> cr√©√© pr√©c√©demment
  // Inserer le <p> dans le <li>
  taskElement.append(titleElement);

  //? E07 : Ajout de la cat√©gorie
  // Cr√©er l‚Äô√©l√©ment => <em>cat√©gorie</em>
  const categoryElt = document.createElement("em");
  // Si la T√¢che a une cat√©gorie
  if (taskData.category != null) {
    // Ins√©rer le nom de la cat√©gorie
    categoryElt.textContent = taskData.category.name;
  }
  // Si la T√¢che n‚Äôa pas de cat√©gorie
  else {
    categoryElt.textContent = "Non cat√©goris√©e";
  }

  // Ins√©rer la cl√© √©trang√®re de l'id de la cat√©gorie
  categoryElt.dataset.id = taskData.category_id;

  // Ins√©rer l‚Äô√©l√©ment dans la t√¢che
  taskElement.append(categoryElt);

  // console.log(titleElement);

  //? Cr√©ation du bouton delete + le stocker
  // Cr√©er => <div class="delete"></div>
  const deleteElement = document.createElement("div");

  // Ajouter la classe 'delete' √† cette <div>
  deleteElement.classList.add("delete");

  //* Ajout bouton delete √† l‚Äô√©l√©ment t√¢che
  // Ins√©rer la <div> dans le <li>
  taskElement.append(deleteElement);

  // je place l'√©couteur d'√©v√©nement click sur le bouton üóë S07E06
  deleteElement.addEventListener("click", handleDeleteTask);

  //TODO Cr√©ation du bouton edit + le stocker
  // Cr√©er <div class="edit"></div>
  const editElement = document.createElement("div");

  // lui ajouter la classe "edit"
  editElement.classList.add("edit");

  // Inserer la div "edit" dans le <li>
  taskElement.append(editElement);

  // je place l'√©couteur d'√©v√©nement click
  editElement.addEventListener("click", handleEditTask);

  // Selectionner le container <ul>
  const taskListElement = document.querySelector(".tasklist");

  // Inserer le <li> dans la liste (le container <ul>)
  taskListElement.append(taskElement);

  //* Version de PierreOclock avec closest() qui r√©cup√®re parent cibl√© le + proche
  // On r√©cupere le ul
  // nomDeLaVariableContenantUnEl√©ment.closest(.classeDuParentRecherch√© )
  //  const cardElement = clickedElement.closest('.card');
  //  const ulElement = pElement.closest(".tasklist");
}

/**
 * ? Coordonne les 2 fonctions de r√©cup√©ration et d'insertion dans le Dom
 ** supprime tout le DOM dans le <ul>
 * ex√©cute getAllTasksFromApi()
 * boucle sur le r√©sultat de la fonction getAllTasksFromApi()
 * √† l'int√©rieur de la boucle, ex√©cute insertTaskInDOM(taskData)
 */
async function displayTasks() {
  // Ne return rien

  // Selectionner le container <ul>
  const ulElement = document.querySelector(".tasklist");
  // on supprime tout ce qu'il y a dans le <ul>
  ulElement.textContent = "";

  // appeler la fonction qui va chercher les taches
  // on va chercher la liste des t√¢ches actuellement enregistr√©es en BDD
  // On r√©cup√®re la liste des Tasks au format JSON
  //! Mise en 'async' de la requete pour que le reste continue de s'executer
  const data = await getTasks();

  // Boucle sur le r√©sultat, pour cr√©er le DOM correspondant
  // for (const iterator of object)
  for (const task of data) {
    insertTaskInDom(task);
  }
}
